Project Overview
CostPerDemo is a Next.js (App Router) B2B SaaS platform for client authentication, workspace creation, and admin management. Currently on `main` branch (Phase 1), it uses Supabase for authentication and database, ShadCN for UI, and Tailwind CSS for styling. Focus is on robust authentication and workspace creation via API endpoints. Onboarding features are in `onboarding-progress` branch and not used yet.

Supabase Configuration
Use Supabase project configured in `.cursor/mcp.json` (project_ref: [YOUR_PROJECT_REF], URL: https://[YOUR_PROJECT_REF].supabase.co).
Initialize client in `src/lib/supabase.ts` using `@supabase/supabase-js`.
Tables: `users` (id: uuid, email: text, role: text, workspace_id: uuid, created_at: timestamp), `workspaces` (id: uuid, name: text, owner_id: uuid, subdomain: text, created_at: timestamp, updated_at: timestamp).
Ignore `workspace_onboarding` table until onboarding is reintegrated.
Create API endpoints (e.g., `/api/auth/login`) for all Supabase interactions; avoid direct client-side queries.

Coding Standards
Language: TypeScript (.tsx, .ts).
File Structure:
- Pages: `src/app/` (e.g., `src/app/login/page.tsx`).
- Components: `src/components/` (e.g., `src/components/AuthForm.tsx`).
- ShadCN UI: `src/components/ui/` (e.g., `src/components/ui/button.tsx`).
- Supabase utils: `src/lib/` (e.g., `src/lib/supabase.ts`).
- API routes: `src/app/api/` (e.g., `src/app/api/auth/login/route.ts`).
Naming:
- PascalCase for components (e.g., `AuthForm`).
- camelCase for variables/functions (e.g., `handleLogin`).
- kebab-case for files (e.g., `auth-form.tsx`).
Formatting:
- Prettier (2-space indent, single quotes).
- ESLint per `eslint.config.mjs`.
Comments:
- JSDoc for complex functions/components.
- Brief file-purpose comment.

Framework and Libraries
Next.js:
- Use App Router (`src/app/`).
- Prefer server components; use client components only for interactivity.
- Create API routes in `src/app/api/` for Supabase.
- Use `middleware.ts` for auth checks.
Supabase:
- Use API endpoints (e.g., `/api/auth/login`) for auth and data.
- Auth: Email/password with verification (`src/app/login`, `src/app/signup`, `src/app/verify`).
- Query `users`, `workspaces` via API routes.
ShadCN:
- Use components (`button`, `card`, `form`, etc.) in `src/components/ui/`.
- Customize with Tailwind CSS.
Tailwind CSS:
- Utility-first classes.
- Mobile-first (e.g., `sm:`, `md:` breakpoints).
- Avoid inline styles; use Tailwind or CSS modules.

Authentication Rules
Use Supabase Auth via API endpoints (`/api/auth/login`, `/api/auth/signup`).
Require email verification (`src/app/verify/page.tsx`).
Middleware: Redirect unauthenticated users to `/login`, authenticated non-admins to `/dashboard` or `/workspace`.
Default role: `client`; `admin` set manually in Supabase.
Post-signup: Prompt workspace creation (`src/app/workspace/page.tsx`).

Database Interactions
Use `users`, `workspaces` tables via API routes.
Write type-safe API handlers (`src/app/api/*/route.ts`) using `types/supabase.ts`.
Handle errors with try/catch; return JSON responses (e.g., `{ error: 'Invalid credentials' }`).
Avoid client-side Supabase queries (e.g., in `src/app/login/page.tsx`).

Component Guidelines
Reusable components in `src/components/` (e.g., `AuthForm`, `WorkspaceForm`).
Use ShadCN for forms, buttons, etc.
Mobile-first with Tailwind responsive classes.
Add ARIA attributes for accessibility.

Error Handling
Show user-friendly errors for form/API failures.
Log server-side errors to console.
Use `src/app/error.tsx` for unhandled errors.

Performance
Use Next.js SSG/SSR for pages.
Optimize assets in `public/`.
Minimize client-side JS with server components.

Testing
Test API routes with `curl` or Postman.
Manually test UI responsiveness (mobile/desktop).
Test auth flows (`/login`, `/signup`, `/dashboard`).

Additional Notes
Focus on Phase 1: Authentication, workspace creation, admin panel.
Exclude onboarding (`src/components/OnboardingForm.tsx`, `workspace_onboarding` table).
Plan for `/api/auth/*` endpoints to replace client-side Supabase calls.
Ask for clarification if tasks are unclear.
Suggest code structure improvements.